<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Promotion]]></title>
    <url>%2F2019%2F08%2F20%2FPromotion%2F</url>
    <content type="text"><![CDATA[在互联网公司的技术体系，都有级别，因此也存在着晋级这种情况，每次晋级，写 述职的 PPT 都感到很困难，因为不知道怎么写，写什么内容？那么，今天主要谈一谈晋级的 PPT 到底如何写。 接下来，我结合自己的个人经验聊一聊这个问题，仅供参考，希望对看到这篇文章的人有所帮助。 述职 PPT 如何写？假设，我的职位是一名保安，我开始我的 PPT 创作。 个人经历概述说明：占用一页 入职时间，担任什么样的职位，有哪些技能 负责哪些项目/产品/业务 示例： 2018.01 - 至今 某某商场 (保安队队长) 熟悉格斗技术、消防技术、安保规范、安保条例、邻里相处技术、PPT 技术、心理学等 负责项目： 1、负责 XXX 商场的巡逻，站岗，执勤 2、负责保安队的安全业务培训、管理 3、负责商场内消防工作等 注意： 简单写一下关键点即可，无需写太多，关键点写出来，剩下的口头阐述，写太多文字没有人愿意看，如果你的 PPT 很炫，那么可以图文并茂的表达，如果 PPT 技术不行，就用纯文字就可以了，毕竟是技术性选手，PPT 能力差一点，可以理解。如果 PPT 能力不行，还非要标图拉框，那会丑的很难看。 工作简介说明：占用一页 介绍一下工作内容，建议还是轮列关键词，说明重点即可。 切勿长篇大论 不要描述你的工作细节和业务细节(除非你的这个工种和职位别人压根不知道你干的是啥，那么你可以描述一下) 如果可以的话，可以列举一些行业内，与你工作相关的失败案例和成功案例。因为通过失败案例可以体现你工作的价值，成功案例可以间接表现出你的能力。 示例： 安保：安保是在公共场合维护公共秩序，保证现场人们的生命财产安全，预防和震慑违反犯罪的案件的发生。 常见无安保案例： XXX 单位，因为无安保人员，造成重大财产丢失案件 XXX 活动，因安保人员懈怠，造成场面混乱，进而扰乱公共秩序 安保优秀案例： 某某小区，小孩走丢，被保安大叔发现，及时带到了保卫处 某某商场，出现持刀歹徒，年轻保安上前立马制服 某某小区，保安半夜巡查抓获小偷一名 就保安这个问题，正向和反向案例比比皆是，看完上面的举例，你觉得保安重不重要。所以写 PPT 的时候，无法描述你工作的重要性，那么适当通过一些成功案例和失败案例，来衬托你的职位的重要性。 主要工作成果说明：占用一页 如果工作成果太多，那就捡重点，有价值的说，如果都重要，非说不可，那加两页。或者，如果是两个重点，但是又没有任何关联关系，那么可以拆分成两页。 最好可以有一些数据支撑，毕竟是展示工作成果，记住，不要扯太多业务，不要扯日常工作，评委不关心。评委只是想从 PPT 和演讲中看出了你的能力，你的成长。 示例： 安保事宜：本年，累计组织安保培训 30 次，组织消防演练 45 次，解决打架事件 10 起，帮助警察侦破案件 5 件等。 严重问题举例： 1、曾在商场门口，发现一人眼神漂移，鬼鬼祟祟，上前打探询问，结果此人拔腿就跑，逃跑过程中，掉落一把水果刀，有效的保证了他人的人身安全。 2、有一人在楼顶想不开，在警察到来之前，我晓之以理，动之以情，持之以恒，导之以行，最终，该人放弃了轻生的念头。 工作成果：安保一年，商场未出现重大生命财产安全事故，有效的保障了商场的公共秩序，且商场的安全系数越来越高。 PPT 可以简单，但是口头表达不能查。 【未完，待续】]]></content>
      <tags>
        <tag>技能&#39;</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[IDEA 使用介绍]]></title>
    <url>%2F2019%2F08%2F18%2Fidea-document%2F</url>
    <content type="text"><![CDATA[界面介绍File：进行对文件进行操作 Edit：对文本进行操作 View：当前 IDEA 下的视图有哪些 Navigate：项目工程直接的跳转 Code：对源码文件的操作 Analyze：对源码、项目依赖关系直接的一些分析 Refactor：代码重构的时候快捷的操作，如抽取方法 Build：构建工程 Run：项目的运行、调试 Tools：工具 VCS：版本控制 高效代码定位跳转功能项目之间跳转Option+Command+[ or Option+Command + ] ：窗口之间的跳转，打开两个 IDEA 窗口，由 A 窗口跳转到 B 窗口 文件之间跳转最近浏览的文件列表：Command + E 最近编辑的文件列表：Shift + Command + E（注意和搜狗输入法冲突） 浏览修改位置的跳转最近修改位置的跳转：Shift + Command + Del 上一次编辑的地方 ​ Control + Command + Del 下一次编辑的地方 最近浏览位置的跳转：Option + Command + ← 上一次浏览的位置 ​ Option + Command + → 利用书签跳转（与系统冲突）打标签：F11 带标记的标签（带有数字或字母）：Command + F11 已经标记好的数据跳转：Command + 数字 收藏位置和文件调出收藏文件夹：Command + 2 收藏：Option + Shift + F ，可以收藏文件、方法 删除：直接按 Delete 键 字符跳转插件 emacsIdea 置跳转（疑似与 IDEA 的快捷键冲突）编辑区和文件区来回跳转Command + 1 ：文件区到编辑区 Esc：从文件区回到刚才的编辑区 利用 Vim 编辑区跳转（未设置）精准搜索类：跳转到类：Command + N 跳转到包括 jar 包中的类：按完上面的键，再按 Command + N 文件：跳转到文件：Shift + Command +N 跳转到包括 jar 包中的类：按完上面的键，再按Shift + Command + N 符号（包括函数或属性）跳转到具体的某个函数或者属性：Shift + Option + Command + N 跳转到包括 jar 包中的类：按完上面的键，再按 Shift + Option + Command + N 字符串搜索Control + Shift + F，调出搜索窗口，Match case 是否包含大小写，Words 搜索的字符串是否是单词，Regex 是否通过正则表达式搜索，File mask 在那类文件中搜索。搜索范围：in project ，当前项目中搜索，Module ，当前模块中搜索，Directory 当前目录中搜索，Space 指定空间搜索。 代码小助手们列操作快速定位到错误：Fn + F2 格式化代码块：Option + Command + F，或者选中某块代码块，然后按快捷键 转换成大小写：Shift + Command + U 选中所有一样的字符：Control + Command + G 移动到行尾：Command + → 移动到行首：Command + ← 移动到下一个单词：Option + → 移动到上一个单词：Option + ← 向右选中全部：Shift + Command + → 向左选中全部：Shift + Command + ← 向右选中一个单词：Shift + Option + → 向左选中一个单词：Shift + Option + ← 向上选中代码段：Shift + ↑ 向下选中代码段：Shift + ↓ 向右选中字符：Shift + → 向左选中字符：Shift + ← Live TemplatePostfix常用的操作： for ，即一个 for 循环的操作，使用方式：eg：100.for sout 即 System.out.println(“”)，使用方式：”test”.sout field ，在构造方法中，帮助自动声明全局变量 return，eg：user.return &gt;&gt; ，自动为 return user nn：eg：user.nn &gt;&gt; if (user != null ){…} try：user.try 创建一个 try catch 语句 new ：user.new () &gt;&gt; new user() Alter + Enter（MAC 上为 Option + Enter）可以在所有有黄色小灯泡提示的地方按此快捷键，帮助修复或者完善代码 自动创建函数 lsit replace （优化代码） 字符串 format 或者 build（即字符拼接时候的格式化） 实现接口 单词拼写 导包 编辑高质量代码重构重构变量：Shift + F6 ：全部相同的值重新命名 重构方法： 方法一：Fn + Command + F6：函数签名的重构 方法二：Option + Enter 抽取 抽取变量：Option + Command + V ，当有重复的值被引用时，可以抽取为局部变量 抽取静态常量：Option + Command + C 可以抽取为一个全局静态常量，但是与 Alfred 的快捷键冲突 抽取成员变量：Option + Command + F，可以抽取声明为一个成员变量 抽取方法参数：Option + Command + P，将类中的成员变量抽离成方法，由方法传入 抽取函数：Option + Command + M，当方法过长的时候，通过该快捷键，可以抽离为函数 寻找修改轨迹git 的集成 annotate ：可以查看代码的 git 信息，IDEA 未设置快捷键，自定义为 Control +Option + Command + H 查看所有改动的地方：Shift + Control +Option + ⬆ 撤销（git 回滚），包括单个和项目改动之处：Option + Command + Z 放在改动之处，按键 在没有改动的地方，按键，可以撤销整个文件 放在文件夹上，可以撤销整个文件夹或者包 Local History代码没有版本控制时，IDEA 会默认给你进行版本控制 未设置快键键，调用方式：1、Shift + Command + A ，2、输入 Local History show history ：显示过去的操作记录 Put Lable ：类似于 git 的 commit ，在本地做一次保存 关联一切与 Sprinr 的关联：忽略，IDEA 自动关联了与数据库的关联：忽略开始调试你的程序断点调试添加断点：Fn + Command + F8 单步运行： 启动当前的 Debug：Fn + Shift + F9 运行当前的：Fn + Shift + F10 单步运行：Fn + F8 跳到下一个断点：Fn + F9 进入方法体：Fn + F7 出去方法体：Fn + Shift + F8 结束运行：Fn + Command + F2 查看所有断点：Fn + Shift + Command + F8 禁止所有断点：Mute Breakpoints，无快捷键，意思是执行了部分断点后，跳过所有剩下的断点 条件断点：Fn + Shift + Command + F8，添加条件断点 表达式求值：Fn + Option + F8 运行到指定行：Fn + Option + F9 ，运行到光标所在行 setValue ：在 Debug 时，下方的视图窗口，对需要重新设置的内容进行 setValue 运行程序运行当前上下文：Fn + Control + Shift + F9，Debug，光标往上找，运行最近的可以执行的方法。 Fn + Control + Shift + F10，Run，光标往上找，运行最近的可以执行的方法。如，执行某一个单元测试方法，如果光标在外边，执行当前整个单元测试类。 在当前可运行列表选择一个运行Shift + Option + F9：选择执行过的中的某一个进行执行 Shift + Command + J：选择配置 Configurations ，IDEA 默认没有，自定义 其他操作文件操作在当前文件同一级目录下面新建一个文件：Control + Option + N 复制当前文件：Fn + F5 移动当前文件：Fn + F6 文本操作复制当前文件：在左侧文件上，Command + C 复制当前文件的全部路径：Shift + Command + C 粘贴历史复制的内容：Shift + Command + V 结构图查看当前 field，method 大纲：Fn + Command + F12 查看 Maven 依赖，类图：Shift + Option + Command + U，然后搜索，Command + F 。 查看类的继承结构：Control + H 查看方法调用层次：Control + Option + H，可以详细查看被调用、和调用的关系 补充快捷键直接唤起：Shift + Command + A，然后直接搜索需要的功能 查看某个方法或参数创建自哪里：Control + J 收起整个类或者方法：Command + . Alfred 的调出历史复制的内容：Option + Command + C]]></content>
      <tags>
        <tag>tools</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[apk 反编译]]></title>
    <url>%2F2019%2F08%2F18%2Fapk-%E5%8F%8D%E7%BC%96%E8%AF%91%2F</url>
    <content type="text"><![CDATA[最近 APP 安全测试的内容，了解了一下反编译的内容，主要是看看反编译后，源码中是否泄漏了加密方法、加密 key 或者其他一些敏感数据，防止别人拿去干坏事。 啊，这个是在 macOS 系统上操作的，Win 差不多，可参阅百度灵活变动一下，/(ㄒoㄒ)/~~ 工具介绍Apktool：编译出 dex 文件（供下一步使用） 下载地址：https://ibotpeaches.github.io/Apktool/install/ dex2jar：将 dex 文件编译为 jar 文件 下载地址：https://github.com/pxb1988/dex2jar JD-GUI：可显示 “.class” 文件的 Java 源代码 下载地址：http://jd.benow.ca 工具安装1、安装 apktool，根据上述提供的链接选择对应的系统下载工具即可，提示几点。 （1）下载两个文件； （2）其中脚本文件必须充命名为 apktool（Windows 系统是 apktool.bat）； （3）另外一个文件需以 apktool.jar 命名； （4）两个文件均需添加可执行权限（命令：chmod +x apktool 和 chmod +x apktool.jar）； （5）存储到指定位置； （6）配置完成后，在命令窗口输入 apktool 检测是否安装成功。 2、dex2jar 工具直接从 GitHub clone 即可（完成后需确保 d2j-dex2jar.sh 和 d2j_invoke.sh 文件有可执行权限，即采用上述 chmod +x 的方式），JD-GUI 直接下载安装打开即可。 开始反编译第一步： 先找一个 apk 文件（举个栗子：test.apk） 第二步： 利用 apktool 反编译，输入命令 apktool d test.apk，会在当前目录生成一个与文件名相同的文件夹（当前为 test 文件） 第三步： 利用 apktool 回编译，输入命令 apktool b test，此处写的是上一步生产的文件夹名称，此操作会在 test 目录下创建一个 build/apk/ 文件夹，其中包含有一个 classes.dex 的文件（有的可能是多个） 第四步： 利用 dex2jar 将 dex 文件转为 jar 文件，进入下载的 dex-tools 的文件夹，输入命令 ./d2j-dex2jar.sh /xxx/xxx/xxx/classes.dex，就是刚才生成的 classes.dex 的路径，会在 dex-tools 这个文件夹的根目录创建一个 classes-dex2jar.jar 的文件 第五步： 利用 JD_GUI 打开刚才生成的 jar 文件 结尾： 这个，发现了一个 AES 的加密 key，嗯… 安全还有待提高一下。 再看一张图，这个里面就没有任何的信息，是因为被 360 加固了，常见的加固形式还有腾讯乐固等 到此就结束了！]]></content>
      <tags>
        <tag>security</tag>
      </tags>
  </entry>
</search>
